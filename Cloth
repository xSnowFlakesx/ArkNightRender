Shader "Custom/UE5AnisotropicGGX"
{
    Properties
    {
        _BaseColor("Base Color", Color) = (1,1,1,1)
        _BaseMap ("Base Color (RGB) Alpha (A)", 2D) = "white" {}
        _AlphaScale ("Alpha Scale", Range(0, 1)) = 1
        _NormalMap("Normal Map", 2D) = "bump" {}
        _BumpScale("Bump Scale", Range(-5,5)) = 1
        _Roughness("Roughness", 2D) = "white"{}
        _MetallicMap("Metallic (R)", 2D) = "white" {}
        _Anisotropy("Anisotropy", Range(-5,5)) = 0
        _Specular("Specular", Range(0,5)) = 0.5
        _SpecularTint("Specular Tint", Range(0,1)) = 0
        _AnisoRotation("Anisotropy Rotation", Range(0,1)) = 0 // 新增旋转控制
        _EnvironmentCube("Environment Cube", Cube) = "white" {}
        envIntensity("Environment Intensity", Range(0, 10)) = 1.0 // 环境光强度
        _SSRIntensity("SSR Intensity", Range(0,100))= 1
        _EmissionMask("Emission Mask", 2D) = "white" {}
        _EmissionColor("Emission Color", Color) = (1,1,1,1)
        _EmissionIntensity("Emission Intensity", Range(0,10)) = 1
        _FresnelPower("Fresnel Power", Range(0, 10)) = 5.0   // 控制边缘宽度
        _FresnelScale("Fresnel Scale", Range(0, 1)) = 0.5    // 控制强度
        _EdgeColor("Edge Color", Color) = (1, 0.5, 0, 1)     // 边缘光颜色
        
        _OutLineWidth("Outline Width", Range(0,1)) = 0.01
        _MaxOutlineZoffset("Max Outline Zoffset", Range(0,1)) = 0.01
        _OutlineColor("Outline Color", Color) = (0,0,0,1)

        _RampTex("Ramp Texture", 2D) = "white" {}
        _RampTex2("Ramp Texture 2", 2D) = "white" {}

        

       _AlphaClip("Alpha Clip", Range(0,1)) = 0.333
        
    }

    SubShader
    {
        //Tags { "RenderType"="Opaque" "RenderPipeline"="UniversalPipeline" "IgnoreProjector"="True" }

        Pass
        {
            Name "ForwardLit"
            //Tags { "LightMode"="UniversalForward" }
            //Tags { "LightMode" = "UniversalForward" "RenderType" = "Transparent" "Queue" = "Transparent"  "RenderPipeline" = "UniversalPipeline" "IgnoreProjector"="True"}
            Tags { "LightMode" = "UniversalForward"
                "RenderType" = "Transparent"
                "Queue" = "Transparent" // 确保在标准透明物体之后渲染
                "RenderPipeline" = "UniversalPipeline"
                "IgnoreProjector" = "True"
            }
            LOD 200

            // ColorMask 0
            // Stencil{
            //     Ref 1
            //     Comp Equal
            //     Pass Replace
            // }
            Cull Back

            Blend SrcAlpha OneMinusSrcAlpha
            //BlendOp Add, Add
            AlphaToMask On
            Offset 0, -1
            ZWrite On
            ZTest LEqual
            
            
            
            
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fragment _ _SCREEN_SPACE_REFLECTION
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
#pragma multi_compile_fragment _ _REFLECTION_PROBE_BLENDING
#pragma multi_compile_fragment _ _REFLECTION_PROBE_BOX_PROJECTION

#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _ADDITIONAL_LIGHTS
            #pragma multi_compile_fragment _ _SSR_ENABLED

#pragma shader_feature_local _SCREEN_SPACE_RIM
            #pragma shader_feature_local _SCREEN_SPACE_SHADOW
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"
             #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareNormalsTexture.hlsl"



            struct Attributes
            {
                float4 positionOS : POSITION;
                float3 normalOS : NORMAL;
                float4 tangentOS : TANGENT;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float2 uv : TEXCOORD0;
                float3 positionWS : TEXCOORD1;
                float3 normalWS : TEXCOORD2;
                float3 tangentWS : TEXCOORD3;
                float3 bitangentWS : TEXCOORD4;
                float3 viewDirWS : TEXCOORD5;
                float4 positionCS : SV_POSITION;
            };

            TEXTURE2D(_BaseMap);
            TEXTURE2D(_NormalMap);
            SAMPLER(sampler_NormalMap);
            float _BumpScale;
            SAMPLER(sampler_BaseMap);
            
            CBUFFER_START(UnityPerMaterial)
            float4 _BaseMap_ST;
            half4 _BaseColor;
            TEXTURE2D(_Roughness);

            sampler2D _EmissionMask;
            float4 _EmissionColor;
            float _EmissionIntensity;

            float _FresnelPower;
            float _FresnelScale;
            float3 _EdgeColor;

            sampler2D _RampTex;
            sampler2D _RampTex2;

            float envIntensity;

            TEXTURE2D(_MetallicMap);
            //TEXTURE2D(_MetallicMap);
SAMPLER(sampler_MetallicMap);
            float _Anisotropy;
            float _Specular;
            float _SpecularTint;
            float _AnisoRotation;
            float _SSRIntensity;
            float _AlphaScale;
            float _AlphaClip;
            

            TEXTURECUBE(_EnvironmentCube);
            SAMPLER(sampler_EnvironmentCube);
            CBUFFER_END

            // UE5改进的各向异性分布函数
            float D_GGXAnisoUE5(float at, float ab, float ToH, float BoH, float NoH)
            {
                float ToH2 = ToH * ToH;
                float BoH2 = BoH * BoH;
                float NoH2 = NoH * NoH;
                float denominator = ToH2/(at*at) + BoH2/(ab*ab) + NoH2;
                denominator = PI * at * ab * (denominator * denominator);
                return 1.0 / denominator;
            }

            // UE5改进的几何项
            float V_SmithGGXCorrelatedAnisoUE5(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)
            {
                float lambdaV = NoL * sqrt(NoV * (NoV - NoV * at) + at);
                float lambdaL = NoV * sqrt(NoL * (NoL - NoL * ab) + ab);
                return 0.5 / (lambdaV + lambdaL);
            }

float3 GlossyEnvironmentReflection(float3 reflectDir, float roughness, float occlusion)
{
    float3 envColor = SAMPLE_TEXTURECUBE(_EnvironmentCube, sampler_LinearClamp, reflectDir).rgb;
    return envColor * occlusion;
}
           // 修改旋转函数
float2 RotateAnisotropy(float2 dir, float rotation)
{
    float angle = rotation * 2.0 * PI;
    float sinRot, cosRot;
    sincos(angle, sinRot, cosRot);
    return float2(
        dir.x * cosRot - dir.y * sinRot,
        dir.x * sinRot + dir.y * cosRot
    );
}

float3 CalculateSSR(float3 reflection, float3 positionWS, float roughness)
{
    #if defined(_SSR_ENABLED)
    // 修正1：使用正确的屏幕UV计算
    float2 screenUV = (input.screenPos.xy / input.screenPos.w);
    #if UNITY_UV_STARTS_AT_TOP
    screenUV.y = 1.0 - screenUV.y;
    #endif
    
    // 修正2：使用URP内置深度采样方法
    float rawDepth = SampleSceneDepth(screenUV);
    float3 rayStart = GetCameraPositionWS();
    float3 rayDir = normalize(reflection);
    
    // 修正3：调整步进参数
    const int steps = 32; // 增加步数
    const float stepSize = 0.2; // 增大步长
    const float thickness = 0.1; // 增加厚度容差
    
    for(int i=1; i<=steps; i++)
    {
        float3 rayEnd = positionWS + rayDir * i * stepSize;
        float4 projEnd = TransformWorldToHClip(rayEnd);
        float2 uvEnd = projEnd.xy / projEnd.w * 0.5 + 0.5;
        
        // 处理平台差异
        #if UNITY_UV_STARTS_AT_TOP
        uvEnd.y = 1.0 - uvEnd.y;
        #endif
        
        // 跳过屏幕外坐标
        if(uvEnd.x < 0 || uvEnd.x > 1 || uvEnd.y < 0 || uvEnd.y > 1) 
            continue;
        
        float sceneDepth = SampleSceneDepth(uvEnd);
        float3 scenePos = ComputeWorldSpacePosition(uvEnd, sceneDepth, UNITY_MATRIX_I_VP);
        
        // 使用距离+法线双重检测
        float surfaceDiff = distance(rayEnd, scenePos);
        float3 sceneNormal = SampleSceneNormals(uvEnd);
        float normalCheck = saturate(dot(sceneNormal, -rayDir));
        
        if(surfaceDiff < stepSize * thickness && normalCheck > 0.3)
        {
            // 使用Mipmap优化采样
            return SAMPLE_TEXTURE2D_LOD(_CameraOpaqueTexture, sampler_CameraOpaqueTexture, uvEnd, roughness * 8).rgb;
        }
    }
    #endif
    return 0;
}

            Varyings vert(Attributes input)
            {
                Varyings output;
                VertexPositionInputs positionInputs = GetVertexPositionInputs(input.positionOS.xyz);
                output.positionCS = positionInputs.positionCS;
                output.positionWS = positionInputs.positionWS;

                VertexNormalInputs normalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);
                output.normalWS = normalInput.normalWS;
                output.tangentWS = float4(normalInput.tangentWS, input.tangentOS.w);
                output.bitangentWS = normalInput.bitangentWS;

                output.viewDirWS = unity_OrthoParams.w == 0 ? GetCameraPositionWS() - positionInputs.positionWS : GetWorldToViewMatrix()[2].xyz;

                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                return output;
            }

            half4 frag(Varyings input) : SV_Target
            {
                // 采样贴图
                float4 albedo = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv) * _BaseColor;
                //float3 normalTS = UnpackNormal(SAMPLE_TEXTURE2D(_NormalMap, sampler_BaseMap, input.uv));


                half4 packedNormal = SAMPLE_TEXTURE2D(_NormalMap, sampler_NormalMap, input.uv);
    
                // 解包法线（从[0,1]映射到[-1,1]）
                half3 pixelNormalTS = UnpackNormalScale(packedNormal, _BumpScale);
                
                // 构建TBN矩阵
                float3x3 TBN = float3x3(
                    input.tangentWS.xyz,
                    input.bitangentWS,
                    input.normalWS
                );
                
                // 将法线转换到世界空间
                float3 pixelNormalWS = normalize(mul(pixelNormalTS, TBN));

                float roughness = SAMPLE_TEXTURE2D(_Roughness, sampler_BaseMap, input.uv).a;
                float metallic = SAMPLE_TEXTURE2D(_MetallicMap, sampler_BaseMap, input.uv).r;

                float ao = SAMPLE_TEXTURE2D(_MetallicMap, sampler_BaseMap, input.uv).b;
                //float3 F0 = lerp(0.04, albedo, metallic);
                // 原代码
                //float3 F0 = lerp(0.08 * _Specular, albedo, metallic);
                const float DIELECTRIC_F0 = 0.04;
                float3 baseF0 = lerp(DIELECTRIC_F0, albedo, metallic);
                float3 F0 = baseF0 * _Specular * (1.0 - _SpecularTint) + 
                        albedo * _SpecularTint;
                
                // 构造正交化TBN矩阵
                //float3 N = normalize(input.normalWS);
                float3 N = pixelNormalWS;

                N = normalize(N);
                float3 T = normalize(input.tangentWS);
               // float3 B = // 使用URP内置计算的bitangentWS
                float3 B = normalize(input.bitangentWS); 
                T = normalize(T - N * dot(T, N));
                B = normalize(cross(N, T));
                T = cross(B, N);
                //float3x3 TBN = float3x3(T, B, N);


                // 各向异性方向旋转（新增）
                float2 anisoDir = RotateAnisotropy(float2(1,0), _AnisoRotation);
                T = normalize(anisoDir.x * T + anisoDir.y * B);
                B = normalize(cross(N, T));

                

                //float3x3 TBN = float3x3(T, B, N);

                // 准备光照参数
                float3 V = GetWorldSpaceNormalizeViewDir(input.positionWS);
                float3 L = _MainLightPosition.xyz;
                float3 H = normalize(L + V);
                
                float NoV = saturate(dot(N, V));
                float NoL = saturate(dot(N, L));
                NoL = smoothstep(0.1, 0.9, NoL);
                float NoH = saturate(dot(N, H));
                float ToH = dot(T, H);
                float BoH = dot(B, H);
                float ToV = dot(T, V);
                float BoV = dot(B, V);
                float ToL = dot(T, L);
                float BoL = dot(B, L);

                // UE5各向异性参数计算
                 roughness = max(roughness, 0.001);
                float anisotropy = clamp(_Anisotropy, -0.99, 0.99);
                float at = max(roughness * (1.0 + anisotropy), 0.001);
                float ab = max(roughness * (1.0 - anisotropy), 0.001);

                // 计算D项
                float D = D_GGXAnisoUE5(at, ab, ToH, BoH, NoH);
                
                // 计算G项
                float G = V_SmithGGXCorrelatedAnisoUE5(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);

                // UE5改进的菲涅尔计算
                //float3 F0 = lerp(0.08 * _Specular.xxx, albedo.rgb, _SpecularTint);
                float3 F = F0 + (1.0 - F0) * pow(1.0 - saturate(dot(H, V)), 5.0);

                

                // 能量守恒的BRDF计算
                float3 specular = (D * G * F) * NoL;
                
                //float3 diffuse = albedo.rgb * (1.0 - F) * (1.0 - _SpecularTint) / PI;

                // 添加能量补偿项
                float3 kd = (1.0 - F) * (1.0 - metallic);
                float3 diffuse = albedo * kd / PI;

                // 添加多重散射近似
                float3 multiBounce = 1.0 + F0 * (1.0 / (NoV * NoV) - 1.0);
                specular *= multiBounce;

                // 合并光照
                float3 radiance = _MainLightColor.rgb * NoL;
                float3 color = (diffuse + specular) * radiance * ao;

                

                // 添加环境光照
                float3 ambient = SampleSH(N) * albedo.rgb * ao;

                // // 屏幕空间反射
                // float3 reflection = reflect(-V, N);
                // float3 ssr = CalculateSSR(reflection, input.positionWS, roughness) * _SSRIntensity;
                


                float alpha = albedo.a * _AlphaScale;
                alpha = saturate(alpha); // 确保alpha在[0,1]范围内
                //ssr *= alpha;


                // 添加立方体贴图采样
                // float3 envReflection = GlossyEnvironmentReflection(
                //     reflect(-V, N),
                //     roughness,
                //     0.5
                // );

                // 应使用预过滤的mipmap：
                float3 reflectDir = reflect(-normalize(input.viewDirWS), normalize(N));
                float mip = roughness * (1.7 - 0.7 * roughness) * 10.0;
                float3 envColor = SAMPLE_TEXTURECUBE_LOD(
                    _EnvironmentCube, 
                    sampler_LinearClamp, 
                    reflectDir, 
                    mip
                ).rgb;

                //envColor *= metallic * alpha;
                envColor *= envIntensity;

                float3 metallicEnvColor = envColor * metallic*10 *roughness;


                float3 emission = tex2D(_EmissionMask, input.uv).rgb * _EmissionColor.rgb * _EmissionIntensity;

                Light mainLight = GetMainLight();

                float fresnel = pow(1.0 - saturate(dot(N, normalize(input.viewDirWS))), _FresnelPower);
                fresnel = smoothstep(0.4,0.7,fresnel);
                float3 edgeGlow = mainLight.color * _EdgeColor.rgb * fresnel * _FresnelScale * roughness;
                float3 edgeGlow2 = mainLight.color * _EdgeColor.rgb * fresnel * _FresnelScale;
                edgeGlow += edgeGlow2;
                edgeGlow *= lerp(albedo.rgb,float3(1,1,1),0.9);
                edgeGlow *= NoL;
                //edgeGlow *= alpha;
                edgeGlow = saturate(edgeGlow);
                //emission *= alpha; // 乘以alpha以确保发射光的透明度

                //Ramp
                //float halfDirWS = SafeNormalize(L + input.viewDirWS);
                float fresnel2 = 1.0 - saturate(dot(N, normalize(input.viewDirWS)));
                fresnel2 = smoothstep(0.0, 0.3, fresnel2);
                float fresnel3 = 1.0 - saturate(dot(N, normalize(input.viewDirWS)));
                fresnel3 = smoothstep(0.0, 0.3, fresnel3);

                //fresnel2 = smoothstep(0.0, 1, fresnel2);
                //fresnel2 = smoothstep(-1, 0.9, fresnel2);
                float2 rampUV = float2(fresnel2, 0.5);
                float3 RampColor =  tex2D(_RampTex, rampUV);

                float2 rampUV2 = float2(1-fresnel3, 0.5);
                float3 RampColor2 =  tex2D(_RampTex2, rampUV2);

                RampColor = lerp(RampColor, RampColor2, 0.3);

                
                

                color += envColor * F;
                color += metallicEnvColor *50 * F * roughness;
                color += ambient;
                //color += ssr * F;
                // 在最终颜色输出前添加
                color = saturate(color); // 防止过曝

                
                float3 finalColor = (emission + color + edgeGlow) * RampColor * alpha;

                // 在return之前添加：
                //finalColor *= alpha; // Alpha预乘

                // 处理Alpha测试
                //clip(alpha); // 如果alpha小于阈值，则丢弃像素
                
                //alpha = step(_AlphaClip, alpha); // 应用Alpha裁剪
                // 处理Alpha混合

                return float4(finalColor, alpha);
            }
            ENDHLSL
        }
         Pass
        {
            Name "DepthOnly"
            Tags { "LightMode" = "DepthOnly" }
            ZWrite [_ZWrite]
            ColorMask 0
            Cull [_Cull]

            HLSLPROGRAM

            #pragma multi_compile_instancing
            #pragma multi_compile_DOTS_INSTANCING_ON

            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            //float _AlphaClip;

            Varyings vert(Attributes input)
            {
                Varyings output;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap); // UV计算
                return output;
            }

            // 修改DepthOnly的frag函数：
float4 frag(Varyings input) : SV_TARGET
{
    // 从主Pass获取alpha值
    float alpha = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv).a * _AlphaScale;
    clip(alpha - _AlphaClip);
    return 0;
}
            ENDHLSL
        }



        Pass
        {
            Name "DepthNormals"
            Tags { "LightMode" = "DepthNormals" }
            ZWrite [_ZWrite]
            Cull [_Cull]

            HLSLPROGRAM

            #pragma multi_compile_instancing
            #pragma multi_compile_DOTS_INSTANCING_ON

            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            struct Attributes
            {
                float4 positionOS : POSITION;
                float4 tangentOS : TANGENT;
                float3 normalOS : NORMAL;
                float2 texcoord : TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
                float3 normalWS : TEXCOORD1;
                float4 tangentWS : TEXCOORD2;
            };

            float _AlphaClip;

            Varyings vert(Attributes input)
            {
                Varyings output = (Varyings)0;

                output.uv = input.texcoord;
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);

                VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);
                VertexNormalInputs normalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);

                float3 viewDirWS = GetWorldSpaceNormalizeViewDir(vertexInput.positionWS);                           
                output.normalWS = half3(normalInput.normalWS);
                float sign = input.tangentOS.w * float(GetOddNegativeScale());
                output.tangentWS = half4(normalInput.tangentWS.xyz,sign);

                return output;               
            }

            half4 frag(Varyings input) : SV_Target
            {
                clip(1.0 - _AlphaClip);
                float3 normalWS = input.normalWS.xyz;
                return half4(NormalizeNormalPerPixel(normalWS),0.0);
            }
            ENDHLSL
            
        }
        Pass
        {
            Name"UniversalForwardOnly"
            Tags
            {
                "LightMode" = "UniversalForwardOnly"
            }
            Cull Front
            ZWrite On

            HLSLPROGRAM
            #pragma shader_feature_local _OUTLINE_PASS

            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fog
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
             // 定义 select 函数
             float3 select(int id, float3 e0, float3 e1, float3 e2, float3 e3, float3 e4)
             {
                 return id == 0 ? e0 : (id == 1 ? e1 : (id == 2 ? e2 : (id == 3 ? e3 : e4)));
             }
            // If your project has a faster way to get camera fov in shader, you can replace this slow function to your method.
            // For example, you write cmd.SetGlobalFloat("_CurrentCameraFOV",cameraFOV) using a new RendererFeature in C#.
            // For this tutorial shader, we will keep things simple and use this slower but convenient method to get camera fov
            float GetCameraFOV()
            {
                //https://answers.unity.com/questions/770838/how-can-i-extract-the-fov-information-from-the-pro.html
                float t = unity_CameraProjection._m11;
                float Rad2Deg = 180 / 3.1415;
                float fov = atan(1.0f / t) * 2.0 * Rad2Deg;
                return fov;
            }
            float ApplyOutlineDistanceFadeOut(float inputMulFix)
            {
                //make outline "fadeout" if character is too small in camera's view
                return saturate(inputMulFix);
            }
            float GetOutlineCameraFovAndDistanceFixMultiplier(float positionVS_Z)
            {
                float cameraMulFix;
                if(unity_OrthoParams.w == 0)
                {
                    ////////////////////////////////
                    // Perspective camera case
                    ////////////////////////////////

                    // keep outline similar width on screen accoss all camera distance       
                    cameraMulFix = abs(positionVS_Z);

                    // can replace to a tonemap function if a smooth stop is needed
                    cameraMulFix = ApplyOutlineDistanceFadeOut(cameraMulFix);

                    // keep outline similar width on screen accoss all camera fov
                    cameraMulFix *= GetCameraFOV();       
                }
                else
                {
                    ////////////////////////////////
                    // Orthographic camera case
                    ////////////////////////////////
                    float orthoSize = abs(unity_OrthoParams.y);
                    orthoSize = ApplyOutlineDistanceFadeOut(orthoSize);
                    cameraMulFix = orthoSize * 50; // 50 is a magic number to match perspective camera's outline width
                }

                return cameraMulFix * 0.00005; // mul a const to make return result = default normal expand amount WS
            }
            // Push an imaginary vertex towards camera in view space (linear, view space unit), 
            // then only overwrite original positionCS.z using imaginary vertex's result positionCS.z value
            // Will only affect ZTest ZWrite's depth value of vertex shader

            // Useful for:
            // -Hide ugly outline on face/eye
            // -Make eyebrow render on top of hair
            // -Solve ZFighting issue without moving geometry
            float4 NiloGetNewClipPosWithZOffset(float4 originalPositionCS, float viewSpaceZOffsetAmount)
            {
                if(unity_OrthoParams.w == 0)
                {
                    ////////////////////////////////
                    //Perspective camera case
                    ////////////////////////////////
                    float2 ProjM_ZRow_ZW = UNITY_MATRIX_P[2].zw;
                    float modifiedPositionVS_Z = -originalPositionCS.w + -viewSpaceZOffsetAmount; // push imaginary vertex
                    float modifiedPositionCS_Z = modifiedPositionVS_Z * ProjM_ZRow_ZW[0] + ProjM_ZRow_ZW[1];
                    originalPositionCS.z = modifiedPositionCS_Z * originalPositionCS.w / (-modifiedPositionVS_Z); // overwrite positionCS.z
                    return originalPositionCS;    
                }
                else
                {
                    ////////////////////////////////
                    //Orthographic camera case
                    ////////////////////////////////
                    originalPositionCS.z += -viewSpaceZOffsetAmount / _ProjectionParams.z; // push imaginary vertex and overwrite positionCS.z
                    return originalPositionCS;
                }
            }

            struct Attributes
            {
                float4 positionOS   : POSITION;
                float4 tangentOS    : TANGENT;
                float3 normalOS     : NORMAL;
                float2 texcoord     :TEXCOORD0;
                float2 texcoord1    :TEXCOORD1;
                float2 uv: TEXCOORD0;
            };

            struct Varyings
            {
                float4 positionCS  : SV_POSITION;
                float fogFactor    : TEXCOORD1;
                float2 uv: TEXCOORD0;
            };

            //sampler2D _BaseColorTex;;
            float _OutLineWidth;
            float _MaxOutlineZoffset;
            float4 _OutlineColor;
            //float _MaterialIDUSE; // 添加材质ID变量
            //float4 _OutlineColor2;
            //float4 _OutlineColor3;
            //float4 _OutlineColor4;
            //float4 _OutlineColor5;
            //TEXTURE2D(_OtherDataTex);
            //SAMPLER(sampler_OtherDataTex);
            
            //CBUFFER_START(UnityPerMaterial)
            //float4 _Color;
            //float4 _BaseMap_ST;
            //CBUFFER_END

            Varyings vert(Attributes input)
            {   
                //#if !_OUTLINE_PASS
                //return (Varyings)0;
                //#endif

                VertexPositionInputs positionInputs = GetVertexPositionInputs(input.positionOS.xyz);
                VertexNormalInputs normalInputs = GetVertexNormalInputs(input.normalOS,input.tangentOS);

                float width = _OutLineWidth;
                width *= GetOutlineCameraFovAndDistanceFixMultiplier(positionInputs.positionVS.z);

                float3 positionWS = positionInputs.positionWS.xyz;
                positionWS += normalInputs.normalWS * width;

                Varyings output = (Varyings)0;
                output.positionCS = NiloGetNewClipPosWithZOffset(TransformWorldToHClip(positionWS),_MaxOutlineZoffset);
                output.uv = input.texcoord;
                output.fogFactor = ComputeFogFactor(positionInputs.positionCS.z);

                //Varyings OUT;

                //OUT.positionCS = TransformObjectToHClip(IN.positionOS.xyz);
                //OUT.uv = TRANSFORM_TEX(IN.uv, _BaseMap);

                return output;
            }

            float4 frag(Varyings input) : SV_Target
            {
                //float4 texel = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, IN.uv);
                float3 outlineColor = 0;

                outlineColor = _OutlineColor.rgb;

                // 使用 _OtherDataTex 的 x 通道选择描边颜色
                // float4 otherData = SAMPLE_TEXTURE2D(_OtherDataTex, sampler_OtherDataTex, input.uv);
                // int materialid = max(0,4 - floor(otherData.x *5)); // 将 x 通道值映射到 0-5的整数范围
                // outlineColor = select(materialid, _OutlineColor.rgb, _OutlineColor2.rgb, _OutlineColor3.rgb, _OutlineColor4.rgb, _OutlineColor5.rgb);
                

                //float3 baseMapColor = SAMPLE_TEXTURE2D(_BaseColorTex, sampler_LinearRepeat, input.uv);
                outlineColor *= 0.1;

                float4 color = float4(outlineColor,1);
                color.rgb = MixFog(color.rgb, input.fogFactor);

                return color;
                //return float4(baseMapColor,1);
            }
            ENDHLSL
        }
         // 阴影投射Pass
        UsePass "Universal Render Pipeline/Lit/ShadowCaster"
    }
    
    }
